#!/bin/sh

# Vars
# Do NOT change these, as they affect the update engine!
Revision="@REVISION@"
VersionName="EurekaROM-@BASE_BUILD@.$Revision-V@VERSION@"

# Prefixed log messages are easier to distinguish
pLog() {
	log "$VersionName: $1"
}

# We now debug every step of the process so it's easier to debug problems
pLog "Imager.sh now running"

# Are we on the proper flashcast ver? Do a version check
if ! test -f "/etc/flasher-version" ; then
	fatal "$VersionName: Installation Cancelled, Please Update to Flashcast Version 1.1.1 or Later."
elif ! is_at_least_version "1.1.1" ; then
	fatal "$VersionName: Installation Cancelled, Please Update to Flashcast Version 1.1.1 or Later."
fi

# First we flash the kernel
pLog "Flashing Kernel..."
flash_mtd_partition 'kernel' ./images/boot.img

# Next we flash recovery
pLog "Flashing Recovery..."
flash_mtd_partition 'recovery' ./images/recovery.img

# Then we flash the system
pLog "Flashing System..."
flash_mtd_partition 'rootfs' ./images/system.img

# Before we start, delete the system and boot image
# so we have enough space to keep working
pLog "Deleting boot.img and system.img to free up space in /tmp so we can mount SquashFS"
rm ./images/{boot.img,system.img}

# Start file modification.
pLog "Mounting System Partition"
ROOTFS="$(begin_squashfs_edit 'rootfs')"

# Set build revision
pLog "Setting Build Revision"
echo "$Revision" > "${ROOTFS}/etc/chromecast-ota.rev"

# Replace boot animation
pLog "Replacing Boot Animation"
mv ./misc/boot-animation/* "${ROOTFS}/res/images/"

# Put in our own recovery
pLog "Replacing Recovery File in System Image"
rm "${ROOTFS}/boot/recovery.img"
mv ./images/recovery.img "${ROOTFS}/boot/"

# No updating for you, also setup custom OTA system
pLog "Disabling OTA Updates & Enabling Eureka OTA Updates"
rm "${ROOTFS}/chrome/update_engine"
mv ./bin/update_engine "${ROOTFS}/chrome/"
mkdir -p "${ROOTFS}/usr/share/eureka-apps/ota/"
mv ./bin/chromecast-ota "${ROOTFS}/usr/share/eureka-apps/ota/"

# Is a mod set to disable updates?
if has_mod_option 'DisableEurekaOTA' ; then
	pLog "Disabling Eureka OTA Updates per User Request"
	touch "${ROOTFS}/chrome/disable_ota"
fi

# Change Hard Coded DNS Servers
pLog "Enabling use DHCP DNS Servers"
rm "${ROOTFS}/etc/dhcpcd/dhcpcd-hooks/20-dns.conf"
mv ./misc/20-dns.conf "${ROOTFS}/etc/dhcpcd/dhcpcd-hooks/"

# Enable use of local CGI whitelist program
pLog "Enabling Team Eureka's Whitelisting Service"
sed -i 's|https://clients3.google.com/cast/chromecast/device/baseconfig|http://localhost/whitelist\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|g' "${ROOTFS}/chrome/eureka_shell"
mkdir -p "${ROOTFS}/usr/share/eureka-apps/configs/"
mv ./misc/apps.conf "${ROOTFS}/usr/share/eureka-apps/configs/"
sed -i "s|--app-config-path=/app.conf|--app-config-path=/system/usr/share/eureka-apps/configs/apps.conf|g" "${ROOTFS}/usr/bin/content_shell.sh"

# Upload binaries
pLog "Adding BusyBox Tools, ADB, CURL, FTS-Utils and SSH Binaries"
mv ./bin/{busybox,adbd,curl,dropbear,fts-get,fts-set} "${ROOTFS}/bin/"

# Upload httpd binaries
pLog "Adding lighttpd, required modules, and creating root www folder"
mv ./bin/{lighttpd-angel,lighttpd} "${ROOTFS}/usr/bin/"
mv ./misc/httpd.conf "${ROOTFS}/etc/"
mv ./bin/lib "${ROOTFS}/usr/"
mkdir "${ROOTFS}/usr/share/www/"

# Upload EurekaSettings
pLog "Adding EurekaSettings"
mv ./bin/EurekaSettings "${ROOTFS}/usr/bin/"
mv ./misc/eureka.ini "${ROOTFS}/usr/share/eureka-apps/configs/"
chmod 777 "${ROOTFS}/usr/share/eureka-apps/configs/eureka.ini"

# Upload Whitelist-CGI
pLog "Adding Whitelist-CGI Application and whitelist-sync"
mkdir -p "${ROOTFS}/usr/share/cgi-apps/whitelist-cgi/"
mv ./bin/Whitelist-CGI "${ROOTFS}/usr/share/cgi-apps/whitelist-cgi/index.cgi"
mkdir "${ROOTFS}/usr/share/eureka-apps/whitelist-sync/"
mv ./bin/whitelist-sync "${ROOTFS}/usr/share/eureka-apps/whitelist-sync/whitelist-sync"

# Enable Telnet + ADB
pLog "Enabling Services at Startup"
rm "${ROOTFS}/bin/sntpd"
mv ./bin/sntpd "${ROOTFS}/bin/sntpd"

# Mounting /data
pLog "Mounting UserData Partition"
DATA="$(mount_mtd_partition userdata)"

# Make folder for the keys, and copy them over
pLog "Copying Unique SSH Keys to System"
mkdir -p "${ROOTFS}/usr/share/sshkeys"
cp "${DATA}/flashcast/dropbear/"/* "${ROOTFS}/usr/share/sshkeys/"

# Unmount userdata
pLog "Unmounting UserData"
cleanup_mount "$DATA"

# Clean up and write the modified partition back
pLog "Done editing System, Writing Changes..."
end_squashfs_edit "$ROOTFS"

# One final goodbye
pLog "Script Finished!"
